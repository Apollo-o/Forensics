# Author: o-o
# Date: 8/24/2020
# Description: A Simple Vulnerability Scanner.

import random
import nmap
import os

# Vulnerability Scanner.
# Precondition: None.
# Postcondition: Vulnerable Device.
def scanner():

    # Scan IP Addresses.
    nm      = nmap.PortScannerAsync()
    while True:

        # Await Results.
        def callback_result(host, scan_result):

            # Scan Found.
            if str(scan_result).find("\'scan\'") != -1:
                scan_1   = scan_result["scan"][host]
                scan_2   = str(scan_1)

                # Alive & Vulnerable.
                if scan_1["status"]["state"] == "up" and "CVE" in scan_2:

                    # Local Variables.
                    color   = "\033[0;33;20m"
                    default = "\033[0;0;0m"
                    name    = scan_2[len("\'product\':") + scan_2.find("\'product\':"):].split("\'")[1]

                    # Save Data.
                    with open("devices.txt","a") as writer:
                        writer.write("\nIP Address: {}\n".format(host))
                        writer.write("Device:     {}\n".format(name))

                    # Display Data.
                    print("{}IP Address{}\n{}\n".format(color,default,host))
                    print("{}Device{}\n{}\n".format(color,default,name))
                    print("{}Ports{}\nOpen\n".format(color,default))
                    print("{}Security{}\nVulnerable\n".format(color,default))
                    print("{}Scan{}".format(color,default))
                    os.system("pkill -f vulnerability_scanner.py")
        
        # Scan IP Address.
        nm.scan("{}.{}.{}.{}".format(random.randint(1,254),random.randint(1,254),random.randint(1,254),random.randint(1,254)), arguments="-T4 -Pn -F -sV --script=vuln,vulners", callback=callback_result)

        # Until Complete.
        while nm.still_scanning():
            nm.wait(2)

# Start Scan. 
scanner()
